name: mpit-site

services:
  # mpit-frontend:
  #   container_name: mpit-frontend
  #   restart: always
  #   build: ./mpit-frontend
  #   env_file: .env
  #   ports:
  #     - 8006:3000
  #   environment:
  #     API_ENDPOINT: ${API_ENDPOINT}

  mpit-backend:
    container_name: mpit-backend
    restart: always
    build: ./mpit-backend
    env_file: .env
    healthcheck:
      test: curl -sSf http://localhost:8000/health & curl -sSf http://localhost:8000/health/db
      interval: 60s
      start_period: 1s
      timeout: 600s
    depends_on:
      mpit-database:
        condition: service_healthy
        restart: true
    ports:
      - 8005:8000
    environment:
      MAIN_PATH: ${MAIN_PATH}

      SECRET_KEY: ${SECRET_KEY}
      API_PREFIX: ${API_PREFIX}
      ADMIN_PATH: ${ADMIN_PATH}

      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_URL: ${DATABASE_URL}

      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_TOKEN_LIFETIME: ${JWT_TOKEN_LIFETIME}
      JWT_ALGORITHM: ${JWT_ALGORITHM}


  mpit-database:
    container_name: mpit-database
    restart: always
    image: postgres:latest
    env_file: .env
    volumes:
      - ./dumps/dump.sql:/docker-entrypoint-initdb.d/dump.sql:ro
      - mpit-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -d udom
      interval: 60s
      start_period: 1s
      timeout: 600s
    ports:
      - 5432:5432
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}


volumes:
  mpit-postgres-data:
    name: mpit-postgres-data
